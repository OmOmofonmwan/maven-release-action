name: Maven Release Action
description: Utilized for creating releases of projects

# Inputs
inputs:
  branch_name: 
    description: "Current Branch"
    required: true
    default: "main"
  maven_settings:
    description: "Maven Settings File"
    default: '/home/ec2-user/maven/.m2/settings.xml'
  ikmdevops_pat:
    description: "PAT TOKEN for IKMDevops User"
    required: true
  ikmdevops_email:
    description: "Email For IKMDevops User"
    default: 'devops@ikm.dev'
  github_token:
    description: "GitHub Token"
    required: true
  gpg_passphrase:
    description: "GPG Passphrase"
    required: true
  

runs:
  using: "composite" 
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{inputs.ikmdevops_pat}}

    - name: Get Current Version
      shell: bash
      id: current_pom_version
      run: |
          POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=version::$POM_VERSION"

    - name: Print Version
      shell: bash
      run: echo ${{steps.current_pom_version.outputs.POM_VERSION}}

    - name: Verify Is SNAPSHOT Version
      shell: bash
      if: ${{ !contains(steps.current_pom_version.outputs.POM_VERSION, '-SNAPSHOT')}}
      run: |
        echo "ERROR: Version is set to incompatible version ${{steps.current_pom_version.outputs.POM_VERSION}}. Only SNAPSHOT development versions can be converted to a release version."
        exit 1

    - name: Split version code
      uses: xom9ikk/split@v1.1
      id: splitCurrentVersion
      with:
        string: ${{steps.current_pom_version.outputs.POM_VERSION}}
        separator: '-'
        limit: -1

    - name: Split version code - Separate By .
      uses: xom9ikk/split@v1.1
      id: splitVersionMinor
      with:
        string: ${{steps.splitCurrentVersion.outputs._0}}
        separator: .
        limit: -1

    - name: Increment Snapshot Version
      shell: bash
      id: nextSnapshotVersion
      run: |
        SnapshotVersion=${{steps.splitVersionMinor.outputs._0}}.$((${{steps.splitVersionMinor.outputs._1}} + 1)).${{steps.splitVersionMinor.outputs._2}}-SNAPSHOT
        echo "::set-output name=version::$SnapshotVersion"

    - name: Print Information
      shell: bash
      run: |
        echo "Release Version -- ${{steps.splitCurrentVersion.outputs._0}}"
        echo "Snapshot Version -- ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}"

    - name: Set Release Version
      shell: bash
      run: |
          mvn -B versions:set \
          -DnewVersion=${{steps.splitCurrentVersion.outputs._0}} \
          -DgenerateBackupPoms=false

    - name: Build Release Version
      shell: bash
      run: |
           mvn -version
           mvn clean install \
                --batch-mode \
                -e \
                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                -PcodeQuality,release-enforcement

    - name: Create tag
      shell: bash
      run: |
           git remote set-url origin https://git:${{inputs.ikmdevops_pat}}@github.com/${{github.repository}}.git
           git pull -p
           git add .
           git config user.name "ikmdevops"
           git config user.email ${{inputs.ikmdevops_email}}
           git commit -m 'Release ${{steps.splitCurrentVersion.outputs._0}}'
           git tag -a ${{steps.splitCurrentVersion.outputs._0}} -m '${{steps.splitCurrentVersion.outputs._0}}' --force

    - name: Set Dev Version
      shell: bash
      run: |
          mvn -B versions:set \
          -DnewVersion=${{steps.nextSnapshotVersion.outputs.SnapshotVersion}} \
          -DgenerateBackupPoms=false

    - name: Commit & Push
      shell: bash
      run: |
           git add .
           git commit -m 'Set next dev version to ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}'
           git push origin HEAD:main
           git push --tags origin


    - name: Create Release
      shell: bash
      id: create_release
      run: |
          curl -L \
           -X POST \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{inputs.github_token}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
           https://api.github.com/repos/${{github.repository}}/releases \
          -d '{"tag_name":"${{steps.splitCurrentVersion.outputs._0}}","name":"Release ${{steps.splitCurrentVersion.outputs._0}}","body":"Release ${{steps.splitCurrentVersion.outputs._0}}","draft":false,"prerelease":false,"generate_release_notes":false}'

    - name: Checkout Code Repository
      uses: actions/checkout@v4
      with:
        ref: ${{steps.splitCurrentVersion.outputs._0}}

    - name: Maven Build
      shell: bash
      run: |
        mvn clean install \
          -s ${{inputs.maven_settings}} \
          --batch-mode \
          -e \
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
          -PcodeQuality

    - name: Deploy To Nexus
      shell: bash
      run: |
        mvn deploy \
              --batch-mode \
              -e \
              -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
              -DskipTests \
              -DskipITs \
              -Dmaven.main.skip \
              -Dmaven.test.skip \
              -s ${{inputs.maven_settings}} \
              -DrepositoryId='maven-releases' \
              -Dgpg.passphrase=${{inputs.gpg_passphrase}}


    - name: Publish To OSSRH (Maven Central Staging)
      shell: bash
      run: |
          mvn deploy \
              --batch-mode \
              -e \
              -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
              -DskipTests \
              -DskipITs \
              -Dmaven.main.skip \
              -Dmaven.test.skip \
              -s ${{inputs.maven_settings}} \
              -DrepositoryId='maven-releases' \
              -DrepositoryIdOSSRH='true' \
              -PstageOSSRH -Dgpg.passphrase=${{inputs.gpg_passphrase}}
    

